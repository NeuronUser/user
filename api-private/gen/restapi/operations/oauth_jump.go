// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"go.uber.org/zap"
)

// OauthJumpHandlerFunc turns a function with the right signature into a oauth jump handler
type OauthJumpHandlerFunc func(OauthJumpParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OauthJumpHandlerFunc) Handle(params OauthJumpParams) middleware.Responder {
	return fn(params)
}

// OauthJumpHandler interface for that can handle valid oauth jump params
type OauthJumpHandler interface {
	Handle(OauthJumpParams) middleware.Responder
}

// NewOauthJump creates a new http.Handler for the oauth jump operation
func NewOauthJump(ctx *middleware.Context, handler OauthJumpHandler) *OauthJump {
	return &OauthJump{Context: ctx, Handler: handler}
}

/*OauthJump swagger:route POST /token/oauthJump oauthJump

OauthJump oauth jump API

*/
type OauthJump struct {
	Context *middleware.Context
	Handler OauthJumpHandler
}

func (o *OauthJump) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	zap.L().Named("api").Info("OauthJump")

	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOauthJumpParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		zap.L().Named("api").Info("OauthJump", zap.Error(err))
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	zap.L().Named("api").Info("OauthJump", zap.Any("request", &Params))

	res := o.Handler.Handle(Params) // actually handle the request

	zap.L().Named("api").Info("OauthJump", zap.Any("response", res))

	o.Context.Respond(rw, r, route.Produces, route, res)

}
