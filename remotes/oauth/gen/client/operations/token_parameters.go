// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTokenParams creates a new TokenParams object
// with the default values initialized.
func NewTokenParams() *TokenParams {
	var ()
	return &TokenParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTokenParamsWithTimeout creates a new TokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTokenParamsWithTimeout(timeout time.Duration) *TokenParams {
	var ()
	return &TokenParams{

		timeout: timeout,
	}
}

// NewTokenParamsWithContext creates a new TokenParams object
// with the default values initialized, and the ability to set a context for a request
func NewTokenParamsWithContext(ctx context.Context) *TokenParams {
	var ()
	return &TokenParams{

		Context: ctx,
	}
}

// NewTokenParamsWithHTTPClient creates a new TokenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTokenParamsWithHTTPClient(client *http.Client) *TokenParams {
	var ()
	return &TokenParams{
		HTTPClient: client,
	}
}

/*TokenParams contains all the parameters to send to the API endpoint
for the token operation typically these are written to a http.Request
*/
type TokenParams struct {

	/*ClientID*/
	ClientID *string
	/*Code*/
	Code *string
	/*GrantType*/
	GrantType string
	/*RedirectURI*/
	RedirectURI *string
	/*RefreshToken*/
	RefreshToken *string
	/*ResponseType*/
	ResponseType *string
	/*Scope*/
	Scope *string
	/*State*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the token params
func (o *TokenParams) WithTimeout(timeout time.Duration) *TokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the token params
func (o *TokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the token params
func (o *TokenParams) WithContext(ctx context.Context) *TokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the token params
func (o *TokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the token params
func (o *TokenParams) WithHTTPClient(client *http.Client) *TokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the token params
func (o *TokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the token params
func (o *TokenParams) WithClientID(clientID *string) *TokenParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the token params
func (o *TokenParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithCode adds the code to the token params
func (o *TokenParams) WithCode(code *string) *TokenParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the token params
func (o *TokenParams) SetCode(code *string) {
	o.Code = code
}

// WithGrantType adds the grantType to the token params
func (o *TokenParams) WithGrantType(grantType string) *TokenParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the token params
func (o *TokenParams) SetGrantType(grantType string) {
	o.GrantType = grantType
}

// WithRedirectURI adds the redirectURI to the token params
func (o *TokenParams) WithRedirectURI(redirectURI *string) *TokenParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the token params
func (o *TokenParams) SetRedirectURI(redirectURI *string) {
	o.RedirectURI = redirectURI
}

// WithRefreshToken adds the refreshToken to the token params
func (o *TokenParams) WithRefreshToken(refreshToken *string) *TokenParams {
	o.SetRefreshToken(refreshToken)
	return o
}

// SetRefreshToken adds the refreshToken to the token params
func (o *TokenParams) SetRefreshToken(refreshToken *string) {
	o.RefreshToken = refreshToken
}

// WithResponseType adds the responseType to the token params
func (o *TokenParams) WithResponseType(responseType *string) *TokenParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the token params
func (o *TokenParams) SetResponseType(responseType *string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the token params
func (o *TokenParams) WithScope(scope *string) *TokenParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the token params
func (o *TokenParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithState adds the state to the token params
func (o *TokenParams) WithState(state *string) *TokenParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the token params
func (o *TokenParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *TokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// query param client_id
		var qrClientID string
		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {
			if err := r.SetQueryParam("client_id", qClientID); err != nil {
				return err
			}
		}

	}

	if o.Code != nil {

		// query param code
		var qrCode string
		if o.Code != nil {
			qrCode = *o.Code
		}
		qCode := qrCode
		if qCode != "" {
			if err := r.SetQueryParam("code", qCode); err != nil {
				return err
			}
		}

	}

	// query param grant_type
	qrGrantType := o.GrantType
	qGrantType := qrGrantType
	if qGrantType != "" {
		if err := r.SetQueryParam("grant_type", qGrantType); err != nil {
			return err
		}
	}

	if o.RedirectURI != nil {

		// query param redirect_uri
		var qrRedirectURI string
		if o.RedirectURI != nil {
			qrRedirectURI = *o.RedirectURI
		}
		qRedirectURI := qrRedirectURI
		if qRedirectURI != "" {
			if err := r.SetQueryParam("redirect_uri", qRedirectURI); err != nil {
				return err
			}
		}

	}

	if o.RefreshToken != nil {

		// query param refresh_token
		var qrRefreshToken string
		if o.RefreshToken != nil {
			qrRefreshToken = *o.RefreshToken
		}
		qRefreshToken := qrRefreshToken
		if qRefreshToken != "" {
			if err := r.SetQueryParam("refresh_token", qRefreshToken); err != nil {
				return err
			}
		}

	}

	if o.ResponseType != nil {

		// query param response_type
		var qrResponseType string
		if o.ResponseType != nil {
			qrResponseType = *o.ResponseType
		}
		qResponseType := qrResponseType
		if qResponseType != "" {
			if err := r.SetQueryParam("response_type", qResponseType); err != nil {
				return err
			}
		}

	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
